const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY, {
	apiVersion: '2020-08-27',
})
import { createRouter } from 'next-connect'
import { connectToDatabase } from '../../../utils/mongodb'

// Default Req and Res are IncomingMessage and ServerResponse
// You may want to pass in NextApiRequest and NextApiResponse
const router = createRouter()

router.post(async (req, res) => {
	const { formattedProducts, order } = req.body
	const p = formattedProducts
	try {
		// Create Checkout Sessions from body params.
		const { db } = await connectToDatabase()
		const orderWithDate = {
			...order,
			created_at: new Date(),
		}
		const newOrder = await db.collection('orders').insertOne(orderWithDate)
		const { insertedId } = newOrder
		const params = {
			submit_type: 'pay',
			payment_method_types: ['card'],
			billing_address_collection: 'auto',
			shipping_address_collection: {
				allowed_countries: [
					'AC',
					'AD',
					'AE',
					'AF',
					'AG',
					'AI',
					'AL',
					'AM',
					'AO',
					'AQ',
					'AR',
					'AT',
					'AU',
					'AW',
					'AX',
					'AZ',
					'BA',
					'BB',
					'BD',
					'BE',
					'BF',
					'BG',
					'BH',
					'BI',
					'BJ',
					'BL',
					'BM',
					'BN',
					'BO',
					'BQ',
					'BR',
					'BS',
					'BT',
					'BV',
					'BW',
					'BY',
					'BZ',
					'CA',
					'CD',
					'CF',
					'CG',
					'CH',
					'CI',
					'CK',
					'CL',
					'CM',
					'CN',
					'CO',
					'CR',
					'CV',
					'CW',
					'CY',
					'CZ',
					'DE',
					'DJ',
					'DK',
					'DM',
					'DO',
					'DZ',
					'EC',
					'EE',
					'EG',
					'EH',
					'ER',
					'ES',
					'ET',
					'FI',
					'FJ',
					'FK',
					'FO',
					'FR',
					'GA',
					'GB',
					'GD',
					'GE',
					'GF',
					'GG',
					'GH',
					'GI',
					'GL',
					'GM',
					'GN',
					'GP',
					'GQ',
					'GR',
					'GS',
					'GT',
					'GU',
					'GW',
					'GY',
					'HK',
					'HN',
					'HR',
					'HT',
					'HU',
					'ID',
					'IE',
					'IL',
					'IM',
					'IN',
					'IO',
					'IQ',
					'IS',
					'IT',
					'JE',
					'JM',
					'JO',
					'JP',
					'KE',
					'KG',
					'KH',
					'KI',
					'KM',
					'KN',
					'KR',
					'KW',
					'KY',
					'KZ',
					'LA',
					'LB',
					'LC',
					'LI',
					'LK',
					'LR',
					'LS',
					'LT',
					'LU',
					'LV',
					'LY',
					'MA',
					'MC',
					'MD',
					'ME',
					'MF',
					'MG',
					'MK',
					'ML',
					'MM',
					'MN',
					'MO',
					'MQ',
					'MR',
					'MS',
					'MT',
					'MU',
					'MV',
					'MW',
					'MX',
					'MY',
					'MZ',
					'NA',
					'NC',
					'NE',
					'NG',
					'NI',
					'NL',
					'NO',
					'NP',
					'NR',
					'NU',
					'NZ',
					'OM',
					'PA',
					'PE',
					'PF',
					'PG',
					'PH',
					'PK',
					'PL',
					'PM',
					'PN',
					'PR',
					'PS',
					'PT',
					'PY',
					'QA',
					'RE',
					'RO',
					'RS',
					'RU',
					'RW',
					'SA',
					'SB',
					'SC',
					'SE',
					'SG',
					'SH',
					'SI',
					'SJ',
					'SK',
					'SL',
					'SM',
					'SN',
					'SO',
					'SR',
					'SS',
					'ST',
					'SV',
					'SX',
					'SZ',
					'TA',
					'TC',
					'TD',
					'TF',
					'TG',
					'TH',
					'TJ',
					'TK',
					'TL',
					'TM',
					'TN',
					'TO',
					'TR',
					'TT',
					'TV',
					'TW',
					'TZ',
					'UA',
					'UG',
					'US',
					'UY',
					'UZ',
					'VA',
					'VC',
					'VE',
					'VG',
					'VN',
					'VU',
					'WF',
					'WS',
					'XK',
					'YE',
					'YT',
					'ZA',
					'ZM',
					'ZW',
					'ZZ',
				],
			},
			phone_number_collection: {
				enabled: true,
			},
			line_items: p,
			success_url: `${req.headers.origin}/success?session_id={CHECKOUT_SESSION_ID}`,
			cancel_url: `${req.headers.origin}/`,
			mode: 'payment',
			client_reference_id: `${insertedId}`,
		}
		const session = await stripe.checkout.sessions.create(params)
		// console.log(session)
		console.log({ order })
		res.status(200).json({ session, order })
	} catch (err) {
		res.status(err.statusCode || 500).json(err.message)
	}
})
export default router.handler({
	onError: (err, req, res) => {
		console.error(err.stack)
		res.status(500).end('Something broke!')
	},
	onNoMatch: (req, res) => {
		res.status(404).end('Page is not found')
	},
})
